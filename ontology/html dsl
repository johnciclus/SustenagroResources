class Html {

    def writer
    def markup
    def missing         = [:]

    def audio_video     = [ 'audio', 'source', 'track', 'video' ]
    def basic           = [ 'br', 'hr', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p' ]
    def containers      = [ 'address', 'article', 'aside', 'details', 'dialog', 'blockquote', 'div', 'footer', 'header', 'main', 'section', 'summary' ]                             //containers
    def format          = [ 'abbr', 'b', 'bdi', 'bdo', 'cite', 'code', 'del', 'dfn', 'em', 'i', 'ins', 'kbd', 'mark', 'meter', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'small', 'strong', 'sub', 'sup', 'time', 'u', 'var', 'wbr' ]
    def form            = [ 'form' ]                                                                                                                                                //form
    def form_elems      = [ 'button', 'datalist', 'fieldset', 'input', 'keygen', 'label', 'legend', 'optgroup', 'option', 'output', 'select', 'textarea']                           //forms elements
    def frames          = [ 'iframe' ]
    def images          = [ 'img', 'map', 'area', 'canvas', 'figcaption', 'figure' ]
    def links           = [ 'a', 'link', 'nav']
    def lists           = [ 'ul', 'ol', 'li', 'dl', 'dt', 'dd']                                                                                                                     //lists
    def style           = [ 'span', 'style' ]
    def table           = [ 'table' ]                                                                                                                                               //
    def table_parts     = [ 'caption', 'thead', 'tbody', 'tfoot', 'colgroup', 'col' ]                                                                                               //table parts
    def table_elems     = [ 'td', 'th', 'tr']                                                                                                                                       //table elems



    def current   = null

    public Html(){
        //OntologyAdmin ui_onto_admin = new OntologyAdmin()

        audio_video.each({baseFunction(it)})
        basic.each({baseFunction(it)})
        containers.each({baseFunction(it)})
        format.each({baseFunction(it)})
        form.each({baseFunction(it)})
        form_elems.each({baseFunction(it)})
        frames.each({baseFunction(it)})
        images.each({baseFunction(it)})
        links.each({baseFunction(it)})
        lists.each({baseFunction(it)})
        style.each({baseFunction(it)})
        table.each({baseFunction(it)})
        table_parts.each({baseFunction(it)})
        table_elems.each({baseFunction(it)})
    }

    def indicator(Closure cl){
        def code      = cl.rehydrate(new Indicator(), this, this)
        code.resolveStrategy = Closure.DELEGATE_ONLY
        code()
    }

    def baseFunction = { it ->
        Html.metaClass."$it" = {  Map map = [:], Closure cl ->
            //def tag       = new Tag(this)
            //def code      = cl.rehydrate(tag, this, this)
            //code.resolveStrategy = Closure.DELEGATE_ONLY

            def node      = markup.createNode(it, map)
            //def parent    = this.current
            //this.current  = node

            def text      = cl()

            if (text != null ){
                markup.getMkp().yield(text)
            }

            markup.nodeCompleted(null, node)
        }
    }

    def make(Closure closure) {
        writer = new StringWriter()
        markup = new MarkupBuilder(writer)

        closure.setDelegate(this)
        closure.setResolveStrategy(Closure.DELEGATE_ONLY)
        closure()

        return writer.toString()
    }
}



//"Language prototype =
/*

h1 {"bootstrap"}

mark {"bootstrap"}

del {"bootstrap"}

small {"hola mundo"

p 'class': 'lead', {"bootstrap"}

div 'class':'container-fluid', { p 'class': 'lead', "bootstrap" }

blockquote { p { "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante." } }

ul {
    li{"1"}
    li{"2"}
}

div 'class': 'well', { p { 'bootstrap' }  }

div 'class': 'well',  {
    div 'class': 'well', {
        p 'class': 'lead', {
            "hola mundo"
        }
    }
}

ol 'class': "c1", {
    li 'class': "l1", {1}
    li 'class': "l2", {2}
    li 'class': "l2", {3}
    li 'class': "l2", {4}
    li 'class': "l2", {5}
    li 'class': "l2", {6}
}

table 'class':"table table-hover", {
    thead{
        tr{
          th{'#'}
          th{'First Name'}
          th{'Last Name'}
          th{'Username'}
        }
    }
    tbody{
        tr{
          th 'scope':"row", {'1'}
          td{ 'Mark' }
          td{ 'Otto' }
          td{ '@mdo' }
        }
    }
}

div 'class':"form-group", {
    label 'for':"exampleInputEmail1", { 'Email address' }
    input 'type': "email", 'class':"form-control", 'id':"exampleInputEmail1['hola']", 'placeholder':"Enter email", {}
}

input 'type': "email", 'class':"form-control", 'id':"exampleInputEmail", {}

div 'class':"row", {
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
  div 'class':"col-md-1",{".col-md-1"}
}

*/